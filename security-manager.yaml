AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::SecretsManager-2020-07-23
Description: "This is an example template to demonstrate CloudFormation resourcesfor Secrets Manager"
Resources:
  #This is the VPC that the rotation Lambda and the RDS instance will   placed in
  TestVPC: 
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: tru 
  # Subnet that the rotation Lambda and the RDS instance will be placed in 
  TestSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.96.0/19
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId:
        Ref: TestV  
  TestSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/19
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId:
        Ref: TestV  
  #VPC endpoint that will enable the rotation Lambda to make api calls  Secrets Manager 
  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - Ref: TestSubnet01
        - Ref: TestSubnet02
      SecurityGroupIds:
        - !GetAtt TestVPC.DefaultSecurityGroup
      VpcEndpointType: 'Interface'
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      PrivateDnsEnabled: true
      VpcId:
        Ref: TestV  
  #This is a Secret resource with a randomly generated password in i  SecretString JSON.
  MyRDSInstanceRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: 'This is my rds instance secret'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Tags:
        -
          Key: AppName
          Value: MyA  
  #This is an RDS instance resource. Its master username and password u dynamic references to resolve values from 
  #SecretsManager. The dynamic reference guarantees that CloudFormation wi  not log or persist the resolved value 
  #We sub the Secret resource's logical id in order to construct the dynam  reference, since the Secret's name is being #generated by CloudFormation
  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: mysql
      DBSubnetGroupName:
        Ref: MyDBSubnetGroup
      MasterUsername: !Sub '{{resolve:secretsmanage {MyRDSInstanceRotationSecret}::username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanage {MyRDSInstanceRotationSecret}::password}}'
      BackupRetentionPeriod: 0
      VPCSecurityGroups:
        - !GetAtt TestVPC.DefaultSecurityGro  
  #Database subnet group for the RDS instance 
  MyDBSubnetGroup: 
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: "Test Group"
      SubnetIds: 
         - Ref: TestSubnet01
         - Ref: TestSubnet02  
  #This is a SecretTargetAttachment resource which updates the referenc Secret resource with properties about
  #the referenced RDS instance
  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref MyRDSRotationSecret
      TargetId: !Ref MyDBInstance
      TargetType: AWS::RDS::DBInstance

  #This is a RotationSchedule resource. It configures rotation of password f  the referenced secret using a rotation lambda
  #The first rotation happens at resource creation time, with subseque  rotations scheduled according to the rotation rules
  #We explicitly depend on the SecretTargetAttachment resource being creat  to ensure that the secret contains all the
  #information necessary for rotation to succeed
  MySecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: SecretRDSInstanceAttachment 
    Properties:
      SecretId: !Ref MyRDSInstanceRotationSecret
      HostedRotationLambda:
        RotationType: MySQLSingleUser
        RotationLambdaName: SecretsManagerRotation
        VpcSecurityGroupIds: !GetAtt TestVPC.DefaultSecurityGroup
        VpcSubnetIds:
          Fn::Join:
            - ","
            - - Ref: TestSubnet01
              - Ref: TestSubnet02
      RotationRules:
        AutomaticallyAfterDays: 30